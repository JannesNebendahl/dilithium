import 'dart:typed_data';

import 'package:dilithium/dilithium.dart';
import 'package:test/test.dart';
import 'package:dilithium/src/poly.dart';

void main() {

  group('Poly', (){
    test('add', () {
      Poly p1 = Poly(3)..coef = [1, 2, 3];
      Poly p2 = Poly(3)..coef = [4, 5, 6];

      Poly result = p1.add(p2);
      expect(result.coef, equals([5, 7, 9]));
    });

    test('sub', () {
      Poly p1 = Poly(3)..coef = [4, 5, 6];
      Poly p2 = Poly(3)..coef = [1, 2, 3];

      Poly result = p1.sub(p2);
      expect(result.coef, equals([3, 3, 3]));
    });

    test('genRandom eta == 2', () {
      Uint8List rho = Uint8List.fromList([
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
      ]);
      int eta = 2;
      int nonce = 0;

      Poly result = Poly.genRandom(rho, eta, nonce);

      List<int> expectedCoef = [1, -1, -2, -1, 2, 2, 0, 1, 2, 1, -2, 1, -1, 1, 0, 0, 2, 0, -1, -1, 0, 1, -2, 1, -2, 1, -2, 1, -1, -1, 0, 2, -2, 1, 1, 1, 2, -2, 2, -1, 1, 1, 2, -1, -1, 0, -2, 1, -1, -2, 2, -2, 2, -1, 2, 0, -2, 1, -2, -2, -2, 2, 2, -2, -2, 1, -2, 1, -1, 2, -1, 1, 0, 0, 2, -1, 1, -1, 2, 2, -2, 1, 0, 2, 2, -1, 1, 2, -1, 0, 1, 2, -2, -2, 2, -1, 1, 0, 0, 0, -1, -2, -2, 2, -1, 2, 2, -2, -1, -2, 2, 0, 1, 1, 1, 2, 2, 2, 0, 2, 0, -2, -2, 0, -2, 2, -1, 1, 1, 2, 1, 0, 2, -2, -2, 2, 1, -1, 0, 0, 1, -2, -1, 0, -1, -2, -1, 2, 0, -1, -1, -1, 1, -2, -1, 0, -2, 0, 0, -2, 0, -2, -1, -1, 2, -1, -1, -2, 0, -1, 2, -2, 2, 2, 0, 1, 2, -2, -2, 2, -2, 1, 2, -1, -1, -1, -2, 0, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, 0, 0, -1, 2, 2, -1, 0, 2, 1, 2, 0, -1, -1, 0, 2, -2, -1, -2, 1, 2, -1, -1, -1, -2, -2, 1, -2, -1, 0, 1, 1, 2, -2, -1, 2, 2, 1, 0, 2, -2, 0, -1, -1, -2, 1, 1, 1, 1, -2, 2, 2, -1, 1, 0, -2, -1, 0, -2];

      expect(result.coef, equals(expectedCoef));
    });

    test('genRandom eta == 4', () {
      Uint8List rho = Uint8List.fromList([
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
      ]);
      int eta = 4;
      int nonce = 0;

      Poly result = Poly.genRandom(rho, eta, nonce);

      List<int> expectedCoef = [3, 1, 1, 2, 3, 4, 0, -2, 1, 2, -1, -3, -4, 1, 3, 0, -2, 0, -2, -4, 1, -3, -1, 3, 3, -1, 0, 1, -2, -2, 1, 2, 3, 1, -1, 4, -1, -2, 0, 4, 4, 3, 0, 3, -4, 4, 2, 1, -2, -4, -1, 0, -2, 2, -1, 1, -2, 4, -4, 4, 2, 2, 0, 1, 4, 0, -3, 3, -2, 4, 4, -1, 2, 4, 0, -1, 3, 3, -3, -1, 0, -2, -4, 2, 0, -4, -3, 1, 0, 1, 2, 1, -4, 0, -3, 2, 0, 4, -4, -4, 1, 0, 4, 4, -3, 4, 0, 3, 4, -4, -3, 4, -1, -4, 1, 4, 2, -3, 1, 4, 4, 1, -3, 4, 3, -1, 1, 1, -1, 0, 0, -1, 1, -2, 0, 2, -2, -2, 1, -1, -2, -3, -1, 0, -3, 3, 3, -2, -2, 0, 4, -1, -4, 3, -3, 3, -3, 0, -3, -3, -3, -3, -4, 0, -2, -3, -4, 1, -4, 4, -2, 4, 4, -2, 4, -2, -3, 3, -4, 0, -4, -4, -2, -4, 4, 1, -3, 0, -2, 3, -4, 3, -1, -3, -4, 4, 1, -4, -1, 2, 0, 2, -1, 2, -4, -2, -1, 2, -2, 4, 3, 4, 2, -2, 2, 2, -3, -1, -4, -3, 1, -3, -2, -2, 0, 2, -1, -4, 3, 0, -4, -3, -2, 0, -1, 4, 0, -1, -4, 0, -1, -4, 2, -3, 2, 1, 0, 0, -1, 1, 1, 1, 1, 4, 1, -4];

      expect(result.coef, equals(expectedCoef));
    });

    test('genRandom invalid eta', () {
      Uint8List rho = Uint8List.fromList([
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
      ]);
      
      expect(() => Poly.genRandom(rho, 3, 0), throwsA(isA<IllegalEta>()));
    });

    test('genUniformRandom', () {
      Uint8List rho = Uint8List.fromList([
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
      ]);
      int nonce = 0;

      Poly result = Poly.genUniformRandom(rho, nonce);

      List<int> expectedCoef = [5032191, 7715536, 5438706, 8352442, 1510227, 1239907, 2889560, 5033626, 6764716, 400408, 8176921, 3574534, 7544350, 6485619, 5372904, 7943013, 763592, 7622781, 1033874, 4482338, 3689203, 727050, 1794119, 3169356, 266130, 2695183, 6935174, 2471298, 6170693, 830332, 6088810, 7009646, 6701466, 5431678, 3334932, 6616721, 4162721, 6441547, 5399407, 3347107, 4062041, 5622688, 4782803, 2684783, 2617695, 3126078, 2448316, 4234706, 8277697, 1616926, 3630119, 7864107, 8277023, 508216, 4180065, 5999135, 7497840, 349274, 7065799, 1261093, 4957097, 4213730, 1838281, 6349510, 6416765, 7190007, 5240107, 4722895, 2392332, 6249606, 7410731, 172368, 999080, 1518147, 1850567, 5616721, 7311754, 6514638, 1815675, 6521722, 5210312, 1146011, 6167346, 6164177, 5124043, 4557174, 6761115, 932943, 3285447, 2068438, 1966426, 1184329, 974848, 2560737, 4831082, 5860373, 8130920, 831482, 5375485, 536612, 2148113, 665469, 230994, 2556597, 3095701, 7147680, 3077761, 4892707, 1769334, 6754314, 5706, 5503823, 7894043, 5568970, 5099719, 8114693, 3968990, 478928, 3661003, 553777, 754985, 2002897, 5046313, 7129243, 1042984, 2502545, 4429366, 5541437, 3480943, 253326, 578001, 8106347, 2710054, 5576209, 4121530, 3550784, 795550, 4075829, 6112988, 4402386, 4830354, 2528825, 7794219, 6460774, 8044665, 8079168, 3740027, 4086255, 4673594, 1985856, 5400960, 6974895, 5978996, 4486505, 895770, 4133831, 2298460, 1248562, 3555502, 3218231, 413204, 4963747, 6318150, 4091151, 2522569, 8175201, 2759171, 1754949, 5765409, 2579150, 7550827, 3506401, 1905889, 1472933, 6822268, 6688922, 896504, 181956, 238934, 3926942, 2987437, 2291422, 5269793, 6768364, 2328792, 2482766, 46268, 5084291, 1674578, 1849996, 1919631, 5163406, 6204803, 1104205, 5332058, 583351, 3633542, 6509347, 7836008, 7004234, 6921084, 7382672, 7534874, 2721353, 7031493, 7241809, 7107501, 7739890, 3356939, 1404609, 2667822, 5768276, 2211320, 3591256, 164698, 1524145, 3191260, 2395767, 6985342, 2448872, 6676736, 2015012, 8103996, 6965584, 5147783, 4503528, 642718, 4176804, 3577247, 851692, 6979406, 1498070, 744347, 1972897, 1319459, 3520350, 3872446, 2222727, 5410632, 4125932, 2673096, 759847, 275788, 4692373, 7733088, 5677376, 1130670, 7118330, 3078583, 5798517, 7255642, 3239322, 7045471, 1078657, 5025990, 4217345];

      expect(result.coef, equals(expectedCoef));
    });

    test('ntt', () {
      List<int> coef = List<int>.generate(Dilithium.N, (index) => index + 1);
      Poly p = Poly(Dilithium.N)..coef = coef;

      Poly result = p.ntt();

      List<int> expectedCoef = [-4135435, -3344473, -3055472, 5167776, -1630539, -9190453, -1567068, -5609240, 2953865, 2303047, -277368, 6846472, -3398746, -7829548, -3111497, -4684041, -11503494, -10540608, -7218827, -14754235, -11250256, -12982310, -6721664, -11071862, -2227214, -6740032, -4352502, -7293644, 3794733, -632975, 379257, -6744463, 5806729, 14045305, -1191916, 5883394, 6906919, 5159485, 1190806, 7436646, 3049741, 1941269, 9037482, 6449592, -842223, -7762487, 1763007, -5633573, -4912329, 2341473, 3884128, 1920696, 4260396, 2377112, 7082801, 5777763, 1361595, -1074011, -5449997, -7494683, 4404458, -3646556, -5222842, -714660, -6282670, -2238258, -6851546, -1813642, 889868, 750598, -8191724, -5746386, -2360042, 5821440, -9277894, -1397772, 4275052, 2324256, 6949029, 12222763, -1462736, -733486, -8938113, -9111949, -1060853, -1277263, -8221007, -4206745, 6722027, 9073249, 1773523, 8296013, -1260527, -4674905, 3789894, 2877790, 3734413, 9726831, 5343398, -482878, 7593110, 4595836, 797414, 6341380, 1604224, 524012, -1906322, 2448170, -5660104, -8181856, -6112055, 1294027, 11614107, 4201231, 7329319, 4679927, 17121567, 10824181, 10785829, 12487311, 2976675, 3178183, 7096501, 9698117, 552129, 1259175, -4219100, -6025808, -380294, 4519604, -5011939, -1612211, -526318, -4914110, 2847473, -20317, 4304310, -248426, 2999210, 768494, -10700439, -5394179, -2604541, -3999293, -10171170, -11292386, -205587, -8498781, -345058, -3232282, -9955966, -5728362, -5511867, -2533773, -11512325, -9975459, 1224235, 6424577, -744902, -6155822, -753286, -6713376, 288143, -1458001, -5660572, 1320940, 1507077, 8689371, -10335717, -2309019, -1031171, 1431219, 3704562, -2023452, -3160528, 4356674, 1775775, 1398849, 13625832, 5643800, -284579, 2229435, 734655, 4602649, 6521345, -770715, 10653089, 7564397, -60353, -3026705, -4663993, 2052807, -4930, 80178, 6604383, -1605599, -3106901, -2373513, 1685083, 3581203, -5029020, -10170234, -7728795, -1230827, -2800132, -2546366, -3336208, -8909090, 1384350, -6676064, -1181982, 4946116, 2332153, -5762859, 617338, 863180, -2892532, -9438784, -6820323, -2821793, -8224215, -3671611, 569879, -1760789, 5398633, 7070759, 975957, 6094575, 4437087, 5927585, 4386302, 1688494, 3689438, 7151762, -1469031, 3578011, -3963670, 1591406, 1893055, 1950421, 2659622, 3219442, 8869343, 3962377, 10773003, 12684925, 6781776, 8304040, 3043756, 3922682, 5490764, 4384118, 234782, -7219700, -391480, 7057846];

      expect(result.coef, equals(expectedCoef));
    });

    test('pointwiseMontgomery', () {
      List<int> coefP1 = List<int>.generate(Dilithium.N, (index) => index + 1);
      List<int> coefP2 = List<int>.generate(Dilithium.N, (index) => (index + 1) * 2);

      Poly p1 = Poly(Dilithium.N)..coef = coefP1;
      Poly p2 = Poly(Dilithium.N)..coef = coefP2;

      Poly result = p1.pointwiseMontgomery(p2);

      List<int> expectedCoef = [-229184, -916736, -2062656, -3666944, 2650817, 129793, -2849599, 2093058, -1803070, 2222851, -2590013, 519172, 3169989, -3017979, -1283898, -8185, 809160, 1168137, 1068746, 510987, -505140, -1979635, -3912498, 2076688, -772911, -4080878, 533204, -3691499, 5847, 3244825, -2354982, -32740, 1831134, 3236640, 4183778, -3707869, -3677467, -4105433, 3388650, 2043948, 240878, -2020560, 3640051, 461877, -3174665, 1110842, -3442436, -73665, 2836738, -3091644, -1097977, 437322, 1514253, 2132816, 2293011, 1994838, 1238297, 23388, -1649889, -3781534, 2008870, -1039511, 3834157, -130960, 3825972, -1055881, 1984315, -3814274, -1690814, -25722, 1181002, 1929358, 2219346, 2050966, 1424218, 339102, -1204382, -3206234, 2713963, -204625, -3581581, 963512, -3330180, 298177, 3468166, -2200630, 52623, 1847508, 3184025, 4062174, -3898462, -3937049, 3946413, 2991090, 1577399, -294660, -2625087, 2966535, -280628, -3986159, 230359, 3988509, -1092126, 1749288, 4132334, -2323405, -857095, 150847, 700421, 791627, 424465, -401065, -1684963, -3427229, 2752554, 93552, -3023818, 1780861, -2253245, 1634698, -3316144, -344937, 2167902, -4158044, -2561941, -1424206, -744839, -523840, -761209, -1456946, -2611051, 4156893, 2086052, -443157, -3430734, 1503738, -2400575, 1617161, -3203888, -102888, 2539744, -3656409, -1930513, -662985, 146175, 496967, 389391, -176553, -1200865, -2683545, 3755824, 1356408, -1501376, 3562889, -211631, 3935898, -755358, 2475435, -3132557, -818500, 1037189, 2434510, 3373463, 3854048, 3876265, 3440114, 2545595, 1192708, -618547, -2888170, 2764256, -422103, -4066830, 210492, 4029446, -990385, 1911833, -4024734, -2039252, -512138, 556608, 1166986, 1318996, 1012638, 247912, -975182, -2656644, 3583943, 985745, -2070821, 2794662, -1178640, 2770107, -2119931, 912080, 3485723, -2779419, -1122512, 76027, 816198, 1098001, 921436, 286503, -806798, -2358467, 4011913, 1543508, -1383265, 3612011, -231498, 3847042, -913203, 2248601, -3428380, -1183312, 603388, 1931720, 2801684, 3213280, 3166508, 2661368, 1697860, 275984, -1604260, -3942872, 1640565, -1614783, 3051918, -1120166, 2629799, -2459021, 374208, 2749069, -3714855, -2256730, -1256973, -715584, -632563, -1007910, -1841625, -3133708, 3496258, 1287439, -1379748, 3875114, 291191, -3751100, 128658, 3550048, -1867347, 637307, 2683593, -4108906, -2979356, -2308174, -2095360];

      expect(result.coef, equals(expectedCoef));
    });

    test('reduce', () {
      List<int> coefficients = List<int>.generate(Dilithium.N, (index) => index + Dilithium.Q);
      Poly p = Poly(Dilithium.N)..coef = coefficients;

      p.reduce();

      List<int> expectedCoef = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255];

      expect(p.coef, equals(expectedCoef));
    });

    test('invnttTomont', () {
      List<int> coefficients = List<int>.generate(Dilithium.N, (index) => index + 1);
      Poly p = Poly(Dilithium.N)..coef = coefficients;

      p.invnttTomont();

      List<int> expectedCoef = [2555584, -4094004, 445741, 2492145, 162954, -1493646, -2865316, 1966120, 117724, -2156024, 57377, -1401077, 2374870, -661169, 1872253, -767385, -625297, 2884685, 4153317, 1532728, 2384177, 3960789, 731652, -1116420, 753608, -1654232, 2924054, -1173541, -45721, -631616, -1723799, 1878580, -3802464, -4084618, 2749031, 286136, 4002964, -166624, -3493179, -631726, 3400745, -1977111, 1397312, -2299943, 3995664, 2070626, -3852781, -3384455, -2517502, 2457249, 422330, -3295048, 1842693, -3834082, -2178890, -1701355, 2950922, -867524, -143226, -1456024, -2801287, 2729086, -888547, 1486038, 237654, 606622, 1646805, -2150186, -2085699, 3735539, -736528, -3324245, 2607922, 577665, 2713084, 2378349, -3415389, 1474673, -139, 3373477, -3174776, -2535613, -977540, -3381541, -1130192, 3338667, 1666030, 3230146, -3670193, 2391298, 2460446, -3936985, -3041226, -605892, -3550388, 859718, -1050783, 867686, -3490841, -3014890, 2449692, 2479138, 1970172, -1525900, -744625, -1680592, -78330, 144689, 3842724, 2874774, -3910481, 3364246, -3149985, 3141233, 1064407, -2995303, 1836223, -2602407, -2183595, 94329, 1698223, 2516058, 3313587, 1600397, -2224306, 3379734, -2534394, 3982644, 1654208, 3982644, -2534394, 3379734, -2224306, 1600397, 3313587, 2516058, 1698223, 94329, -2183595, -2602407, 1836223, -2995303, 1064407, 3141233, -3149985, 3364246, -3910481, 2874774, 3842724, 144689, -78330, -1680592, -744625, -1525900, 1970172, 2479138, 2449692, -3014890, -3490841, 867686, -1050783, 859718, -3550388, -605892, -3041226, -3936985, 2460446, 2391298, -3670193, 3230146, 1666030, 3338667, -1130192, -3381541, -977540, -2535613, -3174776, 3373477, -139, 1474673, -3415389, 2378349, 2713084, 577665, 2607922, -3324245, -736528, 3735539, -2085699, -2150186, 1646805, 606622, 237654, 1486038, -888547, 2729086, -2801287, -1456024, -143226, -867524, 2950922, -1701355, -2178890, -3834082, 1842693, -3295048, 422330, 2457249, -2517502, -3384455, -3852781, 2070626, 3995664, -2299943, 1397312, -1977111, 3400745, -631726, -3493179, -166624, 4002964, 286136, 2749031, -4084618, -3802464, 1878580, -1723799, -631616, -45721, -1173541, 2924054, -1654232, 753608, -1116420, 731652, 3960789, 2384177, 1532728, 4153317, 2884685, -625297, -767385, 1872253, -661169, 2374870, -1401077, 57377, -2156024, 117724, 1966120, -2865316, -1493646, 162954, 2492145, 445741, -4094004];

      expect(p.coef, equals(expectedCoef));
    });

    test('caddq', () {
      Poly p = Poly(Dilithium.N)..coef = [-306031, -403224, -1294749, 3499972, 68172, 2357346, 1198646, 611451, -1835261, -2621616, -352065, 1402276, 4007972, -2077023, -2007988, 371678, -3013755, 3420002, 2136935, -2626340, 2472408, 2258040, 3537881, 69141, 778258, 2737618, -842981, 1763237, -594659, 1839412, -1934048, -783444, -1853091, 2334323, -1466416, -165940, -328570, -2168400, -2805959, 2384580, -1145289, 1954622, 3974775, 1865797, 3757260, 766881, 3113661, -2382686, -1617267, -1076998, 47485, 303954, 2757266, 3819143, 209377, -1114495, 479915, -4109961, 2588365, 2100633, 3812148, -2627551, -1491170, 2265665, -802901, -533123, 3711402, -1100963, -2315021, -1124274, 257793, -565766, -3481585, -1710854, -2599954, -1338949, 1971116, -1530674, -3266875, -2286371, 1126591, -1754202, -2865345, -3976994, -3007561, -2827572, 1916043, 672517, 2563283, 1833711, -3696227, 1218688, 1879309, 2922543, -1281875, -3726508, -3009372, 2067480, -3286620, 4052192, -338378, -1079039, -3290374, -3935234, 139822, 989909, -4119898, -4079148, -45006, 224131, -2367762, -1065603, 716139, 837471, -1429215, -2468777, 819800, -2935059, 303665, 685863, 1511456, -3606668, 49280, -3866318, 3812733, 3861016, -3668556, -2044106, -1607365, -215652, -1626212, -3855455, 2160037, 2666461, -986749, 3232628, -848799, 532232, -1414901, -34045, 3377919, 1714032, -664271, -1364899, -998480, -268884, -1267789, -2499847, -59655, 3850175, -3917498, -629034, 2035182, -61854, -2125354, -2696771, -988211, -3696093, -1016481, -3409288, 428649, 326390, 3110003, -286769, -761677, -1726413, -3619242, 3969538, -1607150, 699253, 2243385, -3995985, -475385, -284452, -428532, 1125212, 851786, 3627984, -2400784, -1680446, 1930656, -2839302, 1590471, -2330865, 799297, -2182991, -2103823, 3607893, 2489960, 1501718, 3184154, 3164477, 3637881, -3383475, 2357673, 1910454, -2179671, 3844337, 525452, 3624551, -1154941, -628701, 619396, -1064450, -3029207, -2885894, 2704532, -570318, 1018679, 929587, 3496377, -3536227, -3317718, 3592970, 4061353, -2938959, -2300966, 333646, 3330797, 1960527, -3569578, -3447869, 2279327, 1783769, -1176792, 344599, -1903003, -255925, -2630081, -2931018, 1882896, 269079, -2798168, 2874446, 4123568, 1180235, -862389, 2573690, 3081834, -1403939, 3048954, 1385131, -4022262, -902407, 3636521, -1002450, -946256, 3990105, 618632, -2077708, -2686102, 1679319, -743393, -1925984, -2629188, 2095046];

      p.caddq();

      List<int> expectedCoef = [8074386, 7977193, 7085668, 3499972, 68172, 2357346, 1198646, 611451, 6545156, 5758801, 8028352, 1402276, 4007972, 6303394, 6372429, 371678, 5366662, 3420002, 2136935, 5754077, 2472408, 2258040, 3537881, 69141, 778258, 2737618, 7537436, 1763237, 7785758, 1839412, 6446369, 7596973, 6527326, 2334323, 6914001, 8214477, 8051847, 6212017, 5574458, 2384580, 7235128, 1954622, 3974775, 1865797, 3757260, 766881, 3113661, 5997731, 6763150, 7303419, 47485, 303954, 2757266, 3819143, 209377, 7265922, 479915, 4270456, 2588365, 2100633, 3812148, 5752866, 6889247, 2265665, 7577516, 7847294, 3711402, 7279454, 6065396, 7256143, 257793, 7814651, 4898832, 6669563, 5780463, 7041468, 1971116, 6849743, 5113542, 6094046, 1126591, 6626215, 5515072, 4403423, 5372856, 5552845, 1916043, 672517, 2563283, 1833711, 4684190, 1218688, 1879309, 2922543, 7098542, 4653909, 5371045, 2067480, 5093797, 4052192, 8042039, 7301378, 5090043, 4445183, 139822, 989909, 4260519, 4301269, 8335411, 224131, 6012655, 7314814, 716139, 837471, 6951202, 5911640, 819800, 5445358, 303665, 685863, 1511456, 4773749, 49280, 4514099, 3812733, 3861016, 4711861, 6336311, 6773052, 8164765, 6754205, 4524962, 2160037, 2666461, 7393668, 3232628, 7531618, 532232, 6965516, 8346372, 3377919, 1714032, 7716146, 7015518, 7381937, 8111533, 7112628, 5880570, 8320762, 3850175, 4462919, 7751383, 2035182, 8318563, 6255063, 5683646, 7392206, 4684324, 7363936, 4971129, 428649, 326390, 3110003, 8093648, 7618740, 6654004, 4761175, 3969538, 6773267, 699253, 2243385, 4384432, 7905032, 8095965, 7951885, 1125212, 851786, 3627984, 5979633, 6699971, 1930656, 5541115, 1590471, 6049552, 799297, 6197426, 6276594, 3607893, 2489960, 1501718, 3184154, 3164477, 3637881, 4996942, 2357673, 1910454, 6200746, 3844337, 525452, 3624551, 7225476, 7751716, 619396, 7315967, 5351210, 5494523, 2704532, 7810099, 1018679, 929587, 3496377, 4844190, 5062699, 3592970, 4061353, 5441458, 6079451, 333646, 3330797, 1960527, 4810839, 4932548, 2279327, 1783769, 7203625, 344599, 6477414, 8124492, 5750336, 5449399, 1882896, 269079, 5582249, 2874446, 4123568, 1180235, 7518028, 2573690, 3081834, 6976478, 3048954, 1385131, 4358155, 7478010, 3636521, 7377967, 7434161, 3990105, 618632, 6302709, 5694315, 1679319, 7637024, 6454433, 5751229, 2095046];

      expect(p.coef, equals(expectedCoef));
    });

    test('powerRound', () {
      List<int> coefficients = List<int>.generate(Dilithium.N, (index) => index);
      Poly p = Poly(Dilithium.N)..coef = coefficients;

      List<Poly> result = p.powerRound();

      List<int> expectedCoef0 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255];
      List<int> expectedCoef1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

      expect(result[0].coef, equals(expectedCoef0));
      expect(result[1].coef, equals(expectedCoef1));
    });

    test('t1pack', () {
      List<int> coefficients = List<int>.generate(Dilithium.N, (index) => index);
      Poly p = Poly(Dilithium.N)..coef = coefficients;

      Uint8List r = Uint8List.fromList(List<int>.filled((Dilithium.N ~/ 4) * 5, 0));
      p.t1pack(r, 0);

      List<int> expectedR = [ 0x00, 0x04, 0x20, 0xC0, 0x00, 0x04, 0x14, 0x60, 0xC0, 0x01, 0x08, 0x24, 0xA0, 0xC0, 0x02, 0x0C, 0x34, 0xE0, 0xC0, 0x03, 0x10, 0x44, 0x20, 0xC1, 0x04, 0x14, 0x54, 0x60, 0xC1, 0x05, 0x18, 0x64, 0xA0, 0xC1, 0x06, 0x1C, 0x74, 0xE0, 0xC1, 0x07, 0x20, 0x84, 0x20, 0xC2, 0x08, 0x24, 0x94, 0x60, 0xC2, 0x09, 0x28, 0xA4, 0xA0, 0xC2, 0x0A, 0x2C, 0xB4, 0xE0, 0xC2, 0x0B, 0x30, 0xC4, 0x20, 0xC3, 0x0C, 0x34, 0xD4, 0x60, 0xC3, 0x0D, 0x38, 0xE4, 0xA0, 0xC3, 0x0E, 0x3C, 0xF4, 0xE0, 0xC3, 0x0F, 0x40, 0x04, 0x21, 0xC4, 0x10, 0x44, 0x14, 0x61, 0xC4, 0x11, 0x48, 0x24, 0xA1, 0xC4, 0x12, 0x4C, 0x34, 0xE1, 0xC4, 0x13, 0x50, 0x44, 0x21, 0xC5, 0x14, 0x54, 0x54, 0x61, 0xC5, 0x15, 0x58, 0x64, 0xA1, 0xC5, 0x16, 0x5C, 0x74, 0xE1, 0xC5, 0x17, 0x60, 0x84, 0x21, 0xC6, 0x18, 0x64, 0x94, 0x61, 0xC6, 0x19, 0x68, 0xA4, 0xA1, 0xC6, 0x1A, 0x6C, 0xB4, 0xE1, 0xC6, 0x1B, 0x70, 0xC4, 0x21, 0xC7, 0x1C, 0x74, 0xD4, 0x61, 0xC7, 0x1D, 0x78, 0xE4, 0xA1, 0xC7, 0x1E, 0x7C, 0xF4, 0xE1, 0xC7, 0x1F, 0x80, 0x04, 0x22, 0xC8, 0x20, 0x84, 0x14, 0x62, 0xC8, 0x21, 0x88, 0x24, 0xA2, 0xC8, 0x22, 0x8C, 0x34, 0xE2, 0xC8, 0x23, 0x90, 0x44, 0x22, 0xC9, 0x24, 0x94, 0x54, 0x62, 0xC9, 0x25, 0x98, 0x64, 0xA2, 0xC9, 0x26, 0x9C, 0x74, 0xE2, 0xC9, 0x27, 0xA0, 0x84, 0x22, 0xCA, 0x28, 0xA4, 0x94, 0x62, 0xCA, 0x29, 0xA8, 0xA4, 0xA2, 0xCA, 0x2A, 0xAC, 0xB4, 0xE2, 0xCA, 0x2B, 0xB0, 0xC4, 0x22, 0xCB, 0x2C, 0xB4, 0xD4, 0x62, 0xCB, 0x2D, 0xB8, 0xE4, 0xA2, 0xCB, 0x2E, 0xBC, 0xF4, 0xE2, 0xCB, 0x2F, 0xC0, 0x04, 0x23, 0xCC, 0x30, 0xC4, 0x14, 0x63, 0xCC, 0x31, 0xC8, 0x24, 0xA3, 0xCC, 0x32, 0xCC, 0x34, 0xE3, 0xCC, 0x33, 0xD0, 0x44, 0x23, 0xCD, 0x34, 0xD4, 0x54, 0x63, 0xCD, 0x35, 0xD8, 0x64, 0xA3, 0xCD, 0x36, 0xDC, 0x74, 0xE3, 0xCD, 0x37, 0xE0, 0x84, 0x23, 0xCE, 0x38, 0xE4, 0x94, 0x63, 0xCE, 0x39, 0xE8, 0xA4, 0xA3, 0xCE, 0x3A, 0xEC, 0xB4, 0xE3, 0xCE, 0x3B, 0xF0, 0xC4, 0x23, 0xCF, 0x3C, 0xF4, 0xD4, 0x63, 0xCF, 0x3D, 0xF8, 0xE4, 0xA3, 0xCF, 0x3E,0xFC, 0xF4, 0xE3, 0xCF, 0x3F];

      expect(r, equals(expectedR));
    });

    test('etapack eta = 2', () {
      List<int> coefficients = List<int>.generate(Dilithium.N, (index) => index % 3);
      Poly p = Poly(Dilithium.N)..coef = coefficients;

      Uint8List buf = Uint8List.fromList(List<int>.filled(Dilithium.N ~/ 8 * 3, 0));
      p.etapack(2, buf, 0);

      List<int> expectedBufEta2 = [ 0x0A, 0x14, 0x28, 0x50, 0xA0, 0x40, 0x81, 0x02, 0x05, 0x0A, 0x14, 0x28, 0x50, 0xA0, 0x40, 0x81, 0x02, 0x05, 0x0A, 0x14, 0x28, 0x50, 0xA0, 0x40, 0x81, 0x02, 0x05, 0x0A, 0x14, 0x28, 0x50, 0xA0, 0x40, 0x81, 0x02, 0x05, 0x0A, 0x14, 0x28, 0x50, 0xA0, 0x40, 0x81, 0x02, 0x05, 0x0A, 0x14, 0x28, 0x50, 0xA0, 0x40, 0x81, 0x02, 0x05, 0x0A, 0x14, 0x28, 0x50, 0xA0, 0x40, 0x81, 0x02, 0x05, 0x0A, 0x14, 0x28, 0x50, 0xA0, 0x40, 0x81, 0x02, 0x05, 0x0A, 0x14, 0x28, 0x50, 0xA0, 0x40, 0x81, 0x02, 0x05, 0x0A, 0x14, 0x28, 0x50, 0xA0, 0x40, 0x81, 0x02, 0x05, 0x0A, 0x14, 0x28, 0x50, 0xA0, 0x40];

      expect(buf, equals(expectedBufEta2));
    });

    test('etapack eta = 4', () {
      List<int> coefficients = List<int>.generate(Dilithium.N, (index) => index % 3);
      Poly p = Poly(Dilithium.N)..coef = coefficients;

      Uint8List buf = Uint8List.fromList(List<int>.filled(Dilithium.N ~/ 2, 0));
      p.etapack(4, buf, 0);

      List<int> expectedBufEta4 = [ 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66, 35, 52, 66 ];

      expect(buf, equals(expectedBufEta4));
    });

    test('etapack invalid eta', (){
      List<int> coefficients = List<int>.generate(Dilithium.N, (index) => index % 3);
      Poly p = Poly(Dilithium.N)..coef = coefficients;

      expect(()=> p.etapack(1, Uint8List(0), 0), throwsA(isA<IllegalEta>()));
    });

    test('t0pack', () {
      List<int> coefficients = List<int>.generate(Dilithium.N, (i) => i);
      Poly p = Poly(Dilithium.N)..coef = coefficients;

      Uint8List buf = Uint8List.fromList(List<int>.filled(Dilithium.N ~/ 8 * 13, 0));
      p.t0pack(buf, 0);

      List<int> expectedBuf = [ 0x0, 0xF0, 0xFF, 0xF9, 0xBF, 0xFE, 0xC7, 0xFF, 0xF6, 0x9F, 0xFE, 0xCB, 0x7F, 0xF8, 0xEF, 0xFE, 0xD9, 0xBF, 0xFA, 0x47, 0xFF, 0xE6, 0x9F, 0xFC, 0x8B, 0x7F, 0xF0, 0xEF, 0xFD, 0xB9, 0xBF, 0xF6, 0xC7, 0xFE, 0xD6, 0x9F, 0xFA, 0x4B, 0x7F, 0xE8, 0xEF, 0xFC, 0x99, 0xBF, 0xF2, 0x47, 0xFE, 0xC6, 0x9F, 0xF8, 0xB, 0x7F, 0xE0, 0xEF, 0xFB, 0x79, 0xBF, 0xEE, 0xC7, 0xFD, 0xB6, 0x9F, 0xF6, 0xCB, 0x7E, 0xD8, 0xEF, 0xFA, 0x59, 0xBF, 0xEA, 0x47, 0xFD, 0xA6, 0x9F, 0xF4, 0x8B, 0x7E, 0xD0, 0xEF, 0xF9, 0x39, 0xBF, 0xE6, 0xC7, 0xFC, 0x96, 0x9F, 0xF2, 0x4B, 0x7E, 0xC8, 0xEF, 0xF8, 0x19, 0xBF, 0xE2, 0x47, 0xFC, 0x86, 0x9F, 0xF0, 0xB, 0x7E, 0xC0, 0xEF, 0xF7, 0xF9, 0xBE, 0xDE, 0xC7, 0xFB, 0x76, 0x9F, 0xEE, 0xCB, 0x7D, 0xB8, 0xEF, 0xF6, 0xD9, 0xBE, 0xDA, 0x47, 0xFB, 0x66, 0x9F, 0xEC, 0x8B, 0x7D, 0xB0, 0xEF, 0xF5, 0xB9, 0xBE, 0xD6, 0xC7, 0xFA, 0x56, 0x9F, 0xEA, 0x4B, 0x7D, 0xA8, 0xEF, 0xF4, 0x99, 0xBE, 0xD2, 0x47, 0xFA, 0x46, 0x9F, 0xE8, 0xB, 0x7D, 0xA0, 0xEF, 0xF3, 0x79, 0xBE, 0xCE, 0xC7, 0xF9, 0x36, 0x9F, 0xE6, 0xCB, 0x7C, 0x98, 0xEF, 0xF2, 0x59, 0xBE, 0xCA, 0x47, 0xF9, 0x26, 0x9F, 0xE4, 0x8B, 0x7C, 0x90, 0xEF, 0xF1, 0x39, 0xBE, 0xC6, 0xC7, 0xF8, 0x16, 0x9F, 0xE2, 0x4B, 0x7C, 0x88, 0xEF, 0xF0, 0x19, 0xBE, 0xC2, 0x47, 0xF8, 0x6, 0x9F, 0xE0, 0xB, 0x7C, 0x80, 0xEF, 0xEF, 0xF9, 0xBD, 0xBE, 0xC7, 0xF7, 0xF6, 0x9E, 0xDE, 0xCB, 0x7B, 0x78, 0xEF, 0xEE, 0xD9, 0xBD, 0xBA, 0x47, 0xF7, 0xE6, 0x9E, 0xDC, 0x8B, 0x7B, 0x70, 0xEF, 0xED, 0xB9, 0xBD, 0xB6, 0xC7, 0xF6, 0xD6, 0x9E, 0xDA, 0x4B, 0x7B, 0x68, 0xEF, 0xEC, 0x99, 0xBD, 0xB2, 0x47, 0xF6, 0xC6, 0x9E, 0xD8, 0xB, 0x7B, 0x60, 0xEF, 0xEB, 0x79, 0xBD, 0xAE, 0xC7, 0xF5, 0xB6, 0x9E, 0xD6, 0xCB, 0x7A, 0x58, 0xEF, 0xEA, 0x59, 0xBD, 0xAA, 0x47, 0xF5, 0xA6, 0x9E, 0xD4, 0x8B, 0x7A, 0x50, 0xEF, 0xE9, 0x39, 0xBD, 0xA6, 0xC7, 0xF4, 0x96, 0x9E, 0xD2, 0x4B, 0x7A, 0x48, 0xEF, 0xE8, 0x19, 0xBD, 0xA2, 0x47, 0xF4, 0x86, 0x9E, 0xD0, 0xB, 0x7A, 0x40, 0xEF, 0xE7, 0xF9, 0xBC, 0x9E, 0xC7, 0xF3, 0x76, 0x9E, 0xCE, 0xCB, 0x79, 0x38, 0xEF, 0xE6, 0xD9, 0xBC, 0x9A, 0x47, 0xF3, 0x66, 0x9E, 0xCC, 0x8B, 0x79, 0x30, 0xEF, 0xE5, 0xB9, 0xBC, 0x96, 0xC7, 0xF2, 0x56, 0x9E, 0xCA, 0x4B, 0x79, 0x28, 0xEF, 0xE4, 0x99, 0xBC, 0x92, 0x47, 0xF2, 0x46, 0x9E, 0xC8, 0xB, 0x79, 0x20, 0xEF, 0xE3, 0x79, 0xBC, 0x8E, 0xC7, 0xF1, 0x36, 0x9E, 0xC6, 0xCB, 0x78, 0x18, 0xEF, 0xE2, 0x59, 0xBC, 0x8A, 0x47, 0xF1, 0x26, 0x9E, 0xC4, 0x8B, 0x78, 0x10, 0xEF, 0xE1, 0x39, 0xBC, 0x86, 0xC7, 0xF0, 0x16, 0x9E, 0xC2, 0x4B, 0x78, 0x8, 0xEF, 0xE0, 0x19, 0xBC, 0x82, 0x47, 0xF0, 0x6, 0x9E, 0xC0, 0xB, 0x78 ];

      expect(buf, expectedBuf);
    });

    test('genRandomGamma1 gamma == (1 << 17)', () {
      Uint8List seed = Uint8List.fromList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]);
      int nonce = 0;
      int N = Dilithium.N;
      int gamma1 = 1 << 17;

      Poly result = Poly.genRandomGamma1(seed, nonce, N, gamma1);

      List<int> expectedCoef = [121734, -77002, -28253, 106854, -62871, -121308, -68538, -54224, 11297, -127054, 109357, -7942, 122742, 19562, -62460, -82650, 90819, -66916, 91242, -4883, -49610, 8532, 86728, -130101, 96345, 13713, -70746, 44955, 45506, 121371, 53270, -21154, 24769, 53074, -97775, -11701, 40940, 31276, -22093, 73973, 25911, -65782, -31592, -72604, 86543, 2640, 110713, 8481, 55205, 78068, -99948, -25025, 85854, -25267, 8259, -41439, -94066, 30430, 115847, -114741, -77512, -52113, 72773, -99169, -93991, -127982, -58401, 91027, -28150, 69088, -83610, -118815, -64034, -47586, -5831, 111688, 93566, -36350, -94631, -110114, 102331, -16902, -18236, -57123, -8931, 106700, 65, -55728, -84407, 8547, 37317, -129773, 17743, -127339, 67847, 110528, 107810, 16662, -116692, -127373, 14162, -40438, -54183, 120399, 98377, -47082, -72378, -130709, -4991, -45500, -94132, -121854, -13319, 39492, 12800, -4304, 19054, -104257, -55092, 106088, -54188, -25230, -15176, -74877, 20784, 124645, -105025, 12464, 35297, 16537, 44481, 84164, 32720, 30140, 20381, 75174, 20763, -25165, -16841, -43309, 46156, 102544, -90879, 82035, 24183, -73180, 46577, 44248, 91649, 4040, 60233, 44710, -11510, -121510, 47829, 107478, -47472, 70398, -104651, -21807, 72794, -74640, 20435, -74438, 93990, -41611, 37290, 63299, -73981, -121472, 126172, 55504, -125688, -117371, -78066, -106623, 130977, 50480, 56016, -40235, 69932, -32689, 115078, -113435, 38927, 32318, -15921, -69412, -58593, 87654, 51809, 15221, -67292, -2436, 28511, -117592, 110305, 62558, -41556, 121122, -19914, 65060, -63571, 11354, -61336, -50004, 73301, 53397, -26044, -127622, -10898, -108776, -29388, 121634, -109364, 116625, -11905, -2415, 51594, 39900, 79969, -19305, -46595, -10988, 14352, 58956, -123652, 67470, -70996, 81926, 69194, 67938, 26886, -115826, -5095, -48508, 60738, 37361, -43598, -24477, -34320, 109014, 21705, 47886, 38156, 64336, 5305, 103005, -65271, 58050, 18516, 18521, 82797, -39508, 32332, -128345];

      expect(result.coef, expectedCoef);
    });

    test('genRandomGamma1 gamma == (1 << 19)', () {
      Uint8List seed = Uint8List.fromList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]);
      int nonce = 0;
      int N = Dilithium.N;
      int gamma1 = 1 << 19;

      Poly result = Poly.genRandomGamma1(seed, nonce, N, gamma1);

      List<int> expectedCoef = [-9338, -379698, 88347, -94586, 36107, -244470, 199632, -343547, -508217, -21715, -165825, 163320, -509646, -223987, -343504, 435959, -113004, -19532, 343606, -30635, -346835, -163824, -113799, 238990, 255631, 203803, 485483, -77802, -496808, -236019, -455874, 75907, 519029, 428778, 170794, 295890, -105161, -49213, 55370, -466030, 81747, -493437, 18492, 358985, 312271, 31124, 354192, -314122, -252298, 33313, -488104, 374602, 280682, -458964, 53560, -242404, -20027, 360947, -506735, 253444, 58514, 73886, 276350, -476826, 330745, -44962, -293607, -451094, 359918, 295031, 58758, -440459, -28741, -299137, -58483, -408444, -315938, -507671, 103393, 222341, 34185, 168389, 393541, -187307, -499653, 458506, -187924, -506501, -294214, -509495, -116910, 22659, -290106, -225446, -501887, -178861, -501105, 444417, -182002, -225204, 2305, -467776, 522858, 310834, 159100, 143269, -357198, 424350, -185260, -39075, -484276, -330897, 234066, -147718, 273351, 40457, 66147, 437697, 512561, 452605, 117207, -92592, -451894, -37722, 254823, -173238, 439372, -465884, 297425, -37630, 36447, -135111, 210412, -106485, 16160, -70839, 109482, -107215, 344214, 480955, -94231, -213163, -101555, -87231, 466010, -379108, 419070, -371851, -142480, -415400, 381098, 389164, -485891, 519388, -18892, -458415, -470825, 393424, 499736, -439296, 371964, -160941, 201004, -172012, 80921, -466668, 63129, -405856, 276189, -413212, 350614, -341407, -291106, 446355, -137254, -352656, 450574, 333691, -140612, 484486, 373302, 311177, -110469, -100174, -348911, 414800, -252622, 107580, -510490, 382318, -322106, 22740, 311149, 409685, -426254, 369694, 301208, 159599, 211041, 290086, -207712, -460971, 77369, 326586, -400574, 436925, 327701, -61878, -146855, -301423, -425745, 134637, 344401, -230353, -173285, -97910, -165392, 60022, -301747, -476435, 343702, -214849, -223454, -520049, 232198, -374700, 299543, 193591, -215657, 170623, -255997, -313018, 195735, -339582, -152865, -477525, 400677, -340347, 54526, -182266, -118342, 394605, -520640, 182783, -14749, -425186, -402803, 247951, -176958, -383872, -90009, 259610, 470280, 106780, -329282, 229662];

      expect(result.coef, expectedCoef);
    });

    test('genRandomGamma1 invalid gamma', () {
      Uint8List seed = Uint8List.fromList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]);
      
      expect(()=> Poly.genRandomGamma1(seed, 0, Dilithium.N, 1), throwsA(isA<IllegalGamma1>()));
    });

    test('decompose', () {
      List<int> coefficients = List<int>.generate(Dilithium.N, (index) => index);
      Poly p = Poly(Dilithium.N)..coef = coefficients;

      int gamma2 = (Dilithium.Q - 1) ~/ 32;
      List<Poly> result = p.decompose(gamma2);

      List<int> expectedCoef0 = List<int>.generate(Dilithium.N, (index) => index);
      List<int> expectedCoef1 = List<int>.filled(Dilithium.N, 0);

      expect(result[0].coef, equals(expectedCoef0));
      expect(result[1].coef, equals(expectedCoef1));
    });

    test('decompose invalid gamma2', () {
      List<int> coefficients = List<int>.generate(Dilithium.N, (index) => index);
      Poly p = Poly(Dilithium.N)..coef = coefficients;

      expect(()=> p.decompose(1), throwsA(isA<IllegalGamma2>()));
    });

    test('w1pack gamma2 == ((Dilithium.Q - 1) ~/ 88)', () {
      List<int> coefficients = List<int>.generate(Dilithium.N, (index) => index % 16);
      Poly p = Poly(Dilithium.N)..coef = coefficients;

      Uint8List buf = Uint8List(Dilithium.N ~/ 4 * 3);
      int gamma2 = (Dilithium.Q - 1) ~/ 88;
      p.w1pack(gamma2, buf, 0);

      List<int> expectedBuf = [0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C, 0x40, 0x20, 0xC, 0x44, 0x61, 0x1C, 0x48, 0xA2, 0x2C, 0x4C, 0xE3, 0x3C ];

      expect(buf, equals(expectedBuf));
    });

    test('w1pack gamma2 == ((Dilithium.Q - 1) ~/ 32)', () {
      List<int> coefficients = List<int>.generate(Dilithium.N, (index) => index % 16);
      Poly p = Poly(Dilithium.N)..coef = coefficients;

      Uint8List buf = Uint8List(Dilithium.N ~/ 4 * 3);
      int gamma2 = (Dilithium.Q - 1) ~/ 32;
      p.w1pack(gamma2, buf, 0);

      List<int> expectedBuf = [0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 ];

      expect(buf, equals(expectedBuf));
    });

    test('w1pack invalid gamma2', () {
      List<int> coefficients = List<int>.generate(Dilithium.N, (index) => index % 16);
      Poly p = Poly(Dilithium.N)..coef = coefficients;
      Uint8List buf = Uint8List(Dilithium.N ~/ 4 * 3);

      expect(() => p.w1pack(1, buf, 0), throwsA(isA<IllegalGamma2>()));
    });

    test('chknorm', () {
      Poly p = Poly(Dilithium.N)..coef = List<int>.generate(Dilithium.N, (index) => index % 100);

      expect(p.chknorm(200), isFalse);
      expect(p.chknorm(50), isTrue);
    });

    test('zpack', () {
      Poly p = Poly(Dilithium.N)..coef = List<int>.generate(Dilithium.N, (index) => index % (1 << 17));

      Uint8List sign = Uint8List(Dilithium.N * 9 ~/ 4);
      p.zpack(1 << 17, sign, 0);

      Uint8List expectedSign = Uint8List.fromList([
        0x0, 0x0, 0xFE, 0xFF, 0xE7, 0xFF, 0x5F, 0xFF, 0x7F, 0xFC, 0xFF, 0xED, 0xFF, 0xA7, 0xFF, 0x5F, 0xFE, 0x7F, 0xF8, 0xFF, 0xDD, 0xFF, 0x67, 0xFF, 0x5F, 0xFD, 0x7F, 0xF4, 0xFF, 0xCD, 0xFF, 0x27, 0xFF, 0x5F, 0xFC, 0x7F, 0xF0, 0xFF, 0xBD, 0xFF, 0xE7, 0xFE, 0x5F, 0xFB, 0x7F, 0xEC, 0xFF, 0xAD, 0xFF, 0xA7, 0xFE, 0x5F, 0xFA, 0x7F, 0xE8, 0xFF, 0x9D, 0xFF, 0x67, 0xFE, 0x5F, 0xF9, 0x7F, 0xE4, 0xFF, 0x8D, 0xFF, 0x27, 0xFE, 0x5F, 0xF8, 0x7F, 0xE0, 0xFF, 0x7D, 0xFF, 0xE7, 0xFD, 0x5F, 0xF7, 0x7F, 0xDC, 0xFF, 0x6D, 0xFF, 0xA7, 0xFD, 0x5F, 0xF6, 0x7F, 0xD8, 0xFF, 0x5D, 0xFF, 0x67, 0xFD, 0x5F, 0xF5, 0x7F, 0xD4, 0xFF, 0x4D, 0xFF, 0x27, 0xFD, 0x5F, 0xF4, 0x7F, 0xD0, 0xFF, 0x3D, 0xFF, 0xE7, 0xFC, 0x5F, 0xF3, 0x7F, 0xCC, 0xFF, 0x2D, 0xFF, 0xA7, 0xFC, 0x5F, 0xF2, 0x7F, 0xC8, 0xFF, 0x1D, 0xFF, 0x67, 0xFC, 0x5F, 0xF1, 0x7F, 0xC4, 0xFF, 0xD, 0xFF, 0x27, 0xFC, 0x5F, 0xF0, 0x7F, 0xC0, 0xFF, 0xFD, 0xFE, 0xE7, 0xFB, 0x5F, 0xEF, 0x7F, 0xBC, 0xFF, 0xED, 0xFE, 0xA7, 0xFB, 0x5F, 0xEE, 0x7F, 0xB8, 0xFF, 0xDD, 0xFE, 0x67, 0xFB, 0x5F, 0xED, 0x7F, 0xB4, 0xFF, 0xCD, 0xFE, 0x27, 0xFB, 0x5F, 0xEC, 0x7F, 0xB0, 0xFF, 0xBD, 0xFE, 0xE7, 0xFA, 0x5F, 0xEB, 0x7F, 0xAC, 0xFF, 0xAD, 0xFE, 0xA7, 0xFA, 0x5F, 0xEA, 0x7F, 0xA8, 0xFF, 0x9D, 0xFE, 0x67, 0xFA, 0x5F, 0xE9, 0x7F, 0xA4, 0xFF, 0x8D, 0xFE, 0x27, 0xFA, 0x5F, 0xE8, 0x7F, 0xA0, 0xFF, 0x7D, 0xFE, 0xE7, 0xF9, 0x5F, 0xE7, 0x7F, 0x9C, 0xFF, 0x6D, 0xFE, 0xA7, 0xF9, 0x5F, 0xE6, 0x7F, 0x98, 0xFF, 0x5D, 0xFE, 0x67, 0xF9, 0x5F, 0xE5, 0x7F, 0x94, 0xFF, 0x4D, 0xFE, 0x27, 0xF9, 0x5F, 0xE4, 0x7F, 0x90, 0xFF, 0x3D, 0xFE, 0xE7, 0xF8, 0x5F, 0xE3, 0x7F, 0x8C, 0xFF, 0x2D, 0xFE, 0xA7, 0xF8, 0x5F, 0xE2, 0x7F, 0x88, 0xFF, 0x1D, 0xFE, 0x67, 0xF8, 0x5F, 0xE1, 0x7F, 0x84, 0xFF, 0xD, 0xFE, 0x27, 0xF8, 0x5F, 0xE0, 0x7F, 0x80, 0xFF, 0xFD, 0xFD, 0xE7, 0xF7, 0x5F, 0xDF, 0x7F, 0x7C, 0xFF, 0xED, 0xFD, 0xA7, 0xF7, 0x5F, 0xDE, 0x7F, 0x78, 0xFF, 0xDD, 0xFD, 0x67, 0xF7, 0x5F, 0xDD, 0x7F, 0x74, 0xFF, 0xCD, 0xFD, 0x27, 0xF7, 0x5F, 0xDC, 0x7F, 0x70, 0xFF, 0xBD, 0xFD, 0xE7, 0xF6, 0x5F, 0xDB, 0x7F, 0x6C, 0xFF, 0xAD, 0xFD, 0xA7, 0xF6, 0x5F, 0xDA, 0x7F, 0x68, 0xFF, 0x9D, 0xFD, 0x67, 0xF6, 0x5F, 0xD9, 0x7F, 0x64, 0xFF, 0x8D, 0xFD, 0x27, 0xF6, 0x5F, 0xD8, 0x7F, 0x60, 0xFF, 0x7D, 0xFD, 0xE7, 0xF5, 0x5F, 0xD7, 0x7F, 0x5C, 0xFF, 0x6D, 0xFD, 0xA7, 0xF5, 0x5F, 0xD6, 0x7F, 0x58, 0xFF, 0x5D, 0xFD, 0x67, 0xF5, 0x5F, 0xD5, 0x7F, 0x54, 0xFF, 0x4D, 0xFD, 0x27, 0xF5, 0x5F, 0xD4, 0x7F, 0x50, 0xFF, 0x3D, 0xFD, 0xE7, 0xF4, 0x5F, 0xD3, 0x7F, 0x4C, 0xFF, 0x2D, 0xFD, 0xA7, 0xF4, 0x5F, 0xD2, 0x7F, 0x48, 0xFF, 0x1D, 0xFD, 0x67, 0xF4, 0x5F, 0xD1, 0x7F, 0x44, 0xFF, 0xD, 0xFD, 0x27, 0xF4, 0x5F, 0xD0, 0x7F, 0x40, 0xFF, 0xFD, 0xFC, 0xE7, 0xF3, 0x5F, 0xCF, 0x7F, 0x3C, 0xFF, 0xED, 0xFC, 0xA7, 0xF3, 0x5F, 0xCE, 0x7F, 0x38, 0xFF, 0xDD, 0xFC, 0x67, 0xF3, 0x5F, 0xCD, 0x7F, 0x34, 0xFF, 0xCD, 0xFC, 0x27, 0xF3, 0x5F, 0xCC, 0x7F, 0x30, 0xFF, 0xBD, 0xFC, 0xE7, 0xF2, 0x5F, 0xCB, 0x7F, 0x2C, 0xFF, 0xAD, 0xFC, 0xA7, 0xF2, 0x5F, 0xCA, 0x7F, 0x28, 0xFF, 0x9D, 0xFC, 0x67, 0xF2, 0x5F, 0xC9, 0x7F, 0x24, 0xFF, 0x8D, 0xFC, 0x27, 0xF2, 0x5F, 0xC8, 0x7F, 0x20, 0xFF, 0x7D, 0xFC, 0xE7, 0xF1, 0x5F, 0xC7, 0x7F, 0x1C, 0xFF, 0x6D, 0xFC, 0xA7, 0xF1, 0x5F, 0xC6, 0x7F, 0x18, 0xFF, 0x5D, 0xFC, 0x67, 0xF1, 0x5F, 0xC5, 0x7F, 0x14, 0xFF, 0x4D, 0xFC, 0x27, 0xF1, 0x5F, 0xC4, 0x7F, 0x10, 0xFF, 0x3D, 0xFC, 0xE7, 0xF0, 0x5F, 0xC3, 0x7F, 0xC, 0xFF, 0x2D, 0xFC, 0xA7, 0xF0, 0x5F, 0xC2, 0x7F, 0x8, 0xFF, 0x1D, 0xFC, 0x67, 0xF0, 0x5F, 0xC1, 0x7F, 0x4, 0xFF, 0xD, 0xFC, 0x27, 0xF0, 0x5F, 0xC0, 0x7F
      ]);

      expect(sign, equals(expectedSign));
    });

    test('shiftl', () {
      Poly p = Poly(Dilithium.N)..coef = List<int>.generate(Dilithium.N, (index) => index);

      Poly result = p.shiftl();

      List<int> expectedCoef = [
        0, 8192, 16384, 24576, 32768, 40960, 49152, 57344, 65536, 73728, 81920, 90112, 98304, 106496, 114688, 122880, 131072, 139264, 147456, 155648, 163840, 172032, 180224, 188416, 196608, 204800, 212992, 221184, 229376, 237568, 245760, 253952, 262144, 270336, 278528, 286720, 294912, 303104, 311296, 319488, 327680, 335872, 344064, 352256, 360448, 368640, 376832, 385024, 393216, 401408, 409600, 417792, 425984, 434176, 442368, 450560, 458752, 466944, 475136, 483328, 491520, 499712, 507904, 516096, 524288, 532480, 540672, 548864, 557056, 565248, 573440, 581632, 589824, 598016, 606208, 614400, 622592, 630784, 638976, 647168, 655360, 663552, 671744, 679936, 688128, 696320, 704512, 712704, 720896, 729088, 737280, 745472, 753664, 761856, 770048, 778240, 786432, 794624, 802816, 811008, 819200, 827392, 835584, 843776, 851968, 860160, 868352, 876544, 884736, 892928, 901120, 909312, 917504, 925696, 933888, 942080, 950272, 958464, 966656, 974848, 983040, 991232, 999424, 1007616, 1015808, 1024000, 1032192, 1040384, 1048576, 1056768, 1064960, 1073152, 1081344, 1089536, 1097728, 1105920, 1114112, 1122304, 1130496, 1138688, 1146880, 1155072, 1163264, 1171456, 1179648, 1187840, 1196032, 1204224, 1212416, 1220608, 1228800, 1236992, 1245184, 1253376, 1261568, 1269760, 1277952, 1286144, 1294336, 1302528, 1310720, 1318912, 1327104, 1335296, 1343488, 1351680, 1359872, 1368064, 1376256, 1384448, 1392640, 1400832, 1409024, 1417216, 1425408, 1433600, 1441792, 1449984, 1458176, 1466368, 1474560, 1482752, 1490944, 1499136, 1507328, 1515520, 1523712, 1531904, 1540096, 1548288, 1556480, 1564672, 1572864, 1581056, 1589248, 1597440, 1605632, 1613824, 1622016, 1630208, 1638400, 1646592, 1654784, 1662976, 1671168, 1679360, 1687552, 1695744, 1703936, 1712128, 1720320, 1728512, 1736704, 1744896, 1753088, 1761280, 1769472, 1777664, 1785856, 1794048, 1802240, 1810432, 1818624, 1826816, 1835008, 1843200, 1851392, 1859584, 1867776, 1875968, 1884160, 1892352, 1900544, 1908736, 1916928, 1925120, 1933312, 1941504, 1949696, 1957888, 1966080, 1974272, 1982464, 1990656, 1998848, 2007040, 2015232, 2023424, 2031616, 2039808, 2048000, 2056192, 2064384, 2072576, 2080768, 2088960
      ];

      expect(result.coef, equals(expectedCoef));
    });

  });

  

  
}