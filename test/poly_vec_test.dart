import 'dart:typed_data';

import 'package:dilithium/dilithium.dart';
import 'package:test/test.dart';

void main() {

  group('PolyVec', (){
    test('length', (){
      final pv = PolyVec(3);

      expect(pv.length, 3);
    });

    test('add', (){
      final pv1 = mockPolyVec([[1, 2, 3]]);
      final pv2 = mockPolyVec([[4, 5, 6]]);
      final expected = mockPolyVec([[5, 7, 9]]);

      PolyVec actual = pv1.add(pv2);

      expectPolyVecsAreEqual(expected, actual);
    });

    test('sub', (){
      final pv1 = mockPolyVec([[4, 5, 6]]);
      final pv2 = mockPolyVec([[1, 2, 3]]);
      final expected = mockPolyVec([[3, 3, 3]]);

      PolyVec actual = pv1.sub(pv2);

      expectPolyVecsAreEqual(expected, actual);
    });

    test('randomVec', (){
      final rho = Uint8List.fromList([1, 2, 3]);
      final expected = mockPolyVec([[0, -1, -1, -1, -2, 0, -1, 0, -1, -1, -2, 2, -2, 0, -2, -2, 1, 1, 2, 2, 2, -2, -1, 1, -2, -2, -2, -1, 1, -2, 1, -2, 2, -2, -2, 0, -2, 0, 0, -2, 1, 1, -2, -2, 2, 0, 2, 0, -2, -2, -1, -1, 1, -2, -1, -2, 1, 2, 1, -2, 2, -1, 0, -2, 1, 0, -1, 1, 0, 2, -1, 1, 2, -2, -2, -2, -1, 1, -1, -2, 1, 1, 1, 1, 2, 2, -2, 2, 2, 1, -2, 0, 0, -1, 2, 0, 2, 0, -1, -1, 0, 1, -1, -1, 2, 1, 1, -2, 1, 1, -2, 2, 0, 2, -1, 1, -2, -1, -2, 0, -2, -2, 0, 2, 1, 2, -1, -1, -1, 0, 1, 1, 0, 0, 2, -2, 1, 2, -1, 1, 0, -1, 1, 2, 2, 0, -1, -1, -1, 1, 0, 1, 1, -2, -2, -1, 0, -2, -1, -2, -2, -2, 2, -1, 1, -1, 2, 2, -1, 1, 1, 1, -1, 2, -2, 0, 1, -1, 0, 2, 0, -2, -1, -2, 0, 0, 1, 0, -2, 1, -2, 0, 1, 1, 2, 1, 1, -1, -2, -1, -1, 0, -2, -1, -1, 0, 1, 1, 0, -1, 0, 0, 1, -1, 2, 2, 1, -2, 1, 2, 0, 1, -2, 2, 1, 0, 2, 2, 2, 0, -1, 2, 1, -2, 2, 1, 1, -2, 0, -1, 0, 0, -1, -1, 2, 1, 1, 1, -2, 2, 2, -1, 2, -1, 1, 0]]);

      final actual = PolyVec.randomVec(rho, 2, 1, 123);


      expectPolyVecsAreEqual(expected, actual);
    });

    test('ntt', (){
      List<int> coef = List<int>.generate(Dilithium.N, (index) => index + 1);
      final pv = mockPolyVec([coef]);
      final expected = mockPolyVec([[-4135435, -3344473, -3055472, 5167776, -1630539, -9190453, -1567068, -5609240, 2953865, 2303047, -277368, 6846472, -3398746, -7829548, -3111497, -4684041, -11503494, -10540608, -7218827, -14754235, -11250256, -12982310, -6721664, -11071862, -2227214, -6740032, -4352502, -7293644, 3794733, -632975, 379257, -6744463, 5806729, 14045305, -1191916, 5883394, 6906919, 5159485, 1190806, 7436646, 3049741, 1941269, 9037482, 6449592, -842223, -7762487, 1763007, -5633573, -4912329, 2341473, 3884128, 1920696, 4260396, 2377112, 7082801, 5777763, 1361595, -1074011, -5449997, -7494683, 4404458, -3646556, -5222842, -714660, -6282670, -2238258, -6851546, -1813642, 889868, 750598, -8191724, -5746386, -2360042, 5821440, -9277894, -1397772, 4275052, 2324256, 6949029, 12222763, -1462736, -733486, -8938113, -9111949, -1060853, -1277263, -8221007, -4206745, 6722027, 9073249, 1773523, 8296013, -1260527, -4674905, 3789894, 2877790, 3734413, 9726831, 5343398, -482878, 7593110, 4595836, 797414, 6341380, 1604224, 524012, -1906322, 2448170, -5660104, -8181856, -6112055, 1294027, 11614107, 4201231, 7329319, 4679927, 17121567, 10824181, 10785829, 12487311, 2976675, 3178183, 7096501, 9698117, 552129, 1259175, -4219100, -6025808, -380294, 4519604, -5011939, -1612211, -526318, -4914110, 2847473, -20317, 4304310, -248426, 2999210, 768494, -10700439, -5394179, -2604541, -3999293, -10171170, -11292386, -205587, -8498781, -345058, -3232282, -9955966, -5728362, -5511867, -2533773, -11512325, -9975459, 1224235, 6424577, -744902, -6155822, -753286, -6713376, 288143, -1458001, -5660572, 1320940, 1507077, 8689371, -10335717, -2309019, -1031171, 1431219, 3704562, -2023452, -3160528, 4356674, 1775775, 1398849, 13625832, 5643800, -284579, 2229435, 734655, 4602649, 6521345, -770715, 10653089, 7564397, -60353, -3026705, -4663993, 2052807, -4930, 80178, 6604383, -1605599, -3106901, -2373513, 1685083, 3581203, -5029020, -10170234, -7728795, -1230827, -2800132, -2546366, -3336208, -8909090, 1384350, -6676064, -1181982, 4946116, 2332153, -5762859, 617338, 863180, -2892532, -9438784, -6820323, -2821793, -8224215, -3671611, 569879, -1760789, 5398633, 7070759, 975957, 6094575, 4437087, 5927585, 4386302, 1688494, 3689438, 7151762, -1469031, 3578011, -3963670, 1591406, 1893055, 1950421, 2659622, 3219442, 8869343, 3962377, 10773003, 12684925, 6781776, 8304040, 3043756, 3922682, 5490764, 4384118, 234782, -7219700, -391480, 7057846]]);

      final actual = pv.ntt();

      expectPolyVecsAreEqual(expected, actual);
    });

    test('pointwiseMontgomery', (){
      List<int> coef1 = List<int>.generate(Dilithium.N, (index) => index + 1);
      List<int> coef2 = List<int>.generate(Dilithium.N, (index) => (index + 1) * 2);
      final pv = mockPolyVec([coef1]);
      final p = Poly(coef2.length)..coef = coef2;
      final expected = mockPolyVec([[-229184, -916736, -2062656, -3666944, 2650817, 129793, -2849599, 2093058, -1803070, 2222851, -2590013, 519172, 3169989, -3017979, -1283898, -8185, 809160, 1168137, 1068746, 510987, -505140, -1979635, -3912498, 2076688, -772911, -4080878, 533204, -3691499, 5847, 3244825, -2354982, -32740, 1831134, 3236640, 4183778, -3707869, -3677467, -4105433, 3388650, 2043948, 240878, -2020560, 3640051, 461877, -3174665, 1110842, -3442436, -73665, 2836738, -3091644, -1097977, 437322, 1514253, 2132816, 2293011, 1994838, 1238297, 23388, -1649889, -3781534, 2008870, -1039511, 3834157, -130960, 3825972, -1055881, 1984315, -3814274, -1690814, -25722, 1181002, 1929358, 2219346, 2050966, 1424218, 339102, -1204382, -3206234, 2713963, -204625, -3581581, 963512, -3330180, 298177, 3468166, -2200630, 52623, 1847508, 3184025, 4062174, -3898462, -3937049, 3946413, 2991090, 1577399, -294660, -2625087, 2966535, -280628, -3986159, 230359, 3988509, -1092126, 1749288, 4132334, -2323405, -857095, 150847, 700421, 791627, 424465, -401065, -1684963, -3427229, 2752554, 93552, -3023818, 1780861, -2253245, 1634698, -3316144, -344937, 2167902, -4158044, -2561941, -1424206, -744839, -523840, -761209, -1456946, -2611051, 4156893, 2086052, -443157, -3430734, 1503738, -2400575, 1617161, -3203888, -102888, 2539744, -3656409, -1930513, -662985, 146175, 496967, 389391, -176553, -1200865, -2683545, 3755824, 1356408, -1501376, 3562889, -211631, 3935898, -755358, 2475435, -3132557, -818500, 1037189, 2434510, 3373463, 3854048, 3876265, 3440114, 2545595, 1192708, -618547, -2888170, 2764256, -422103, -4066830, 210492, 4029446, -990385, 1911833, -4024734, -2039252, -512138, 556608, 1166986, 1318996, 1012638, 247912, -975182, -2656644, 3583943, 985745, -2070821, 2794662, -1178640, 2770107, -2119931, 912080, 3485723, -2779419, -1122512, 76027, 816198, 1098001, 921436, 286503, -806798, -2358467, 4011913, 1543508, -1383265, 3612011, -231498, 3847042, -913203, 2248601, -3428380, -1183312, 603388, 1931720, 2801684, 3213280, 3166508, 2661368, 1697860, 275984, -1604260, -3942872, 1640565, -1614783, 3051918, -1120166, 2629799, -2459021, 374208, 2749069, -3714855, -2256730, -1256973, -715584, -632563, -1007910, -1841625, -3133708, 3496258, 1287439, -1379748, 3875114, 291191, -3751100, 128658, 3550048, -1867347, 637307, 2683593, -4108906, -2979356, -2308174, -2095360]]);

      final actual = pv.pointwiseMontgomery(p);

      expectPolyVecsAreEqual(expected, actual);
    });

    test('mulMatrixPointwiseMontgomery', (){
      List<int> coef1 = List<int>.generate(Dilithium.N, (index) => index + 1);
      List<int> coef2 = List<int>.generate(Dilithium.N, (index) => (index + 1) * 3);
      final pv1 = mockPolyVec([coef1]);
      final pv2 = mockPolyVec([coef2]);
      final expected = mockPolyVec([[-343776, -1375104, -3093984, 2880001, -213983, -3995519, -84190, 3139587, -2704605, -855932, 305189, 778758, 564775, -336760, -1925847, 4177931, 1213740, -2438003, 1603119, -3423728, -757710, 1220756, 2511670, 3115032, 3030842, 2259100, 799806, -1347040, -4181438, 677029, -3532473, -49110, 2746701, -3525457, -2104750, -1371595, -1325992, -1967941, -3297442, 3065922, 361317, -3030840, 1269868, -3497393, -571789, 1666263, 3216763, 4079711, -4125310, 3742951, 2543243, 655983, -1918829, 3199224, -750692, 2992257, -2332763, 35082, 1715375, 2708116, 3013305, 2630942, 1561027, -196440, -2641459, 2606387, -1213736, 2659006, -2536221, -38583, 1771503, 2894037, 3329019, 3076449, 2136327, 508653, -1806573, 3571066, -119264, 3883271, -1182163, 1445268, 3385147, -3742943, -3178168, -3300945, -4111274, 2771262, 585829, -2287156, 2532724, -1715365, 1729411, -3893782, -1824110, -441990, 252578, 259594, -420942, -1789030, -3844670, 1792555, -1638189, 2623932, -2181916, 705101, 2904566, -3963938, -3139577, -3002768, -3553511, 3588611, 1662764, -950635, 4128831, 140328, 3844690, -1518917, 810341, 2452047, 3406201, 3672803, 3251853, 2143351, 347297, -2136309, 3072950, -785760, 3048395, -2185419, 273632, 2045131, 3129078, 3525473, 3234316, 2255607, 589346, -1764467, 3574585, -154332, 3809616, -1294405, 1294439, 3195731, -3970946, -3444758, -3606122, 3925379, 2388911, 164891, -2746681, 2034612, -2252064, 1154125, 3872762, -2476570, -1133037, -477056, -508627, -1227750, -2634425, 3651765, 869986, -2599345, 1624189, -3220246, -371816, 1789062, 3262388, 4048162, 4146384, 3557054, 2280172, 315738, -2336248, 2704631, -1322459, 2343316, -3058878, -768207, 834912, 1750479, 1978494, 1518957, 371868, -1462773, -3984966, 1185706, -2711591, 1083977, -4188424, -1767960, -35048, 1010312, 1368120, 1038376, 21080, -1683768, -4076168, 1224297, -2543207, 1382154, -3760454, -1210197, 652508, 1827661, 2315262, 2115311, 1227808, -347247, -2609854, 2820404, -817307, 3237847, -1774968, 905082, 2897580, -4177891, -3560497, -3630655, 3992052, 2546790, 413976, -2406390, 2466109, -1729361, 1768034, -3802540, -1680249, -245510, 501677, 561312, -66605, -1382074, -3385095, 2304749, -1073376, 3241364, -1511865, 1427771, 3679855, -3136030, -2259050, -2069622, -2567746, -3753422, 2753767, 192987, -3055345, 1389188, -3234248, -164819, 2217058, 3911383, -3462261, -3143040]]);

      final actual = pv1.mulMatrixPointwiseMontgomery([pv2]);

      expectPolyVecsAreEqual(expected, actual);
    });

    test('reduce', (){
      List<int> actualCoef = List<int>.generate(Dilithium.N, (index) => index + Dilithium.Q);
      List<int> expectedCoef = List<int>.generate(Dilithium.N, (index) => index);
      final expected = mockPolyVec([expectedCoef]);
      final pv = mockPolyVec([actualCoef]);

      pv.reduce();

      expectPolyVecsAreEqual(expected, pv);
    });

    test('invnttTomont', (){
      List<int> coef = List<int>.generate(Dilithium.N, (index) => index + 1);
      final pv = mockPolyVec([coef]);
      final expected = mockPolyVec([[2555584, -4094004, 445741, 2492145, 162954, -1493646, -2865316, 1966120, 117724, -2156024, 57377, -1401077, 2374870, -661169, 1872253, -767385, -625297, 2884685, 4153317, 1532728, 2384177, 3960789, 731652, -1116420, 753608, -1654232, 2924054, -1173541, -45721, -631616, -1723799, 1878580, -3802464, -4084618, 2749031, 286136, 4002964, -166624, -3493179, -631726, 3400745, -1977111, 1397312, -2299943, 3995664, 2070626, -3852781, -3384455, -2517502, 2457249, 422330, -3295048, 1842693, -3834082, -2178890, -1701355, 2950922, -867524, -143226, -1456024, -2801287, 2729086, -888547, 1486038, 237654, 606622, 1646805, -2150186, -2085699, 3735539, -736528, -3324245, 2607922, 577665, 2713084, 2378349, -3415389, 1474673, -139, 3373477, -3174776, -2535613, -977540, -3381541, -1130192, 3338667, 1666030, 3230146, -3670193, 2391298, 2460446, -3936985, -3041226, -605892, -3550388, 859718, -1050783, 867686, -3490841, -3014890, 2449692, 2479138, 1970172, -1525900, -744625, -1680592, -78330, 144689, 3842724, 2874774, -3910481, 3364246, -3149985, 3141233, 1064407, -2995303, 1836223, -2602407, -2183595, 94329, 1698223, 2516058, 3313587, 1600397, -2224306, 3379734, -2534394, 3982644, 1654208, 3982644, -2534394, 3379734, -2224306, 1600397, 3313587, 2516058, 1698223, 94329, -2183595, -2602407, 1836223, -2995303, 1064407, 3141233, -3149985, 3364246, -3910481, 2874774, 3842724, 144689, -78330, -1680592, -744625, -1525900, 1970172, 2479138, 2449692, -3014890, -3490841, 867686, -1050783, 859718, -3550388, -605892, -3041226, -3936985, 2460446, 2391298, -3670193, 3230146, 1666030, 3338667, -1130192, -3381541, -977540, -2535613, -3174776, 3373477, -139, 1474673, -3415389, 2378349, 2713084, 577665, 2607922, -3324245, -736528, 3735539, -2085699, -2150186, 1646805, 606622, 237654, 1486038, -888547, 2729086, -2801287, -1456024, -143226, -867524, 2950922, -1701355, -2178890, -3834082, 1842693, -3295048, 422330, 2457249, -2517502, -3384455, -3852781, 2070626, 3995664, -2299943, 1397312, -1977111, 3400745, -631726, -3493179, -166624, 4002964, 286136, 2749031, -4084618, -3802464, 1878580, -1723799, -631616, -45721, -1173541, 2924054, -1654232, 753608, -1116420, 731652, 3960789, 2384177, 1532728, 4153317, 2884685, -625297, -767385, 1872253, -661169, 2374870, -1401077, 57377, -2156024, 117724, 1966120, -2865316, -1493646, 162954, 2492145, 445741, -4094004]]);

      pv.invnttTomont();

      expectPolyVecsAreEqual(expected, pv);
    });

    test('caddq', (){
      List<int> expectedCoef = List<int>.generate(Dilithium.N, (index) => index);
      List<int> actualCoef = List<int>.generate(Dilithium.N, (index) => index - Dilithium.Q);
      final expected = mockPolyVec([expectedCoef]);
      final pv = mockPolyVec([actualCoef]);

      pv.caddq();

      expectPolyVecsAreEqual(expected, pv);
    });

    test('powerRound', (){
      final pv = mockPolyVec([[-4135435, -3344473, -3055472, 5167776, -1630539, -9190453, -1567068, -5609240, 2953865, 2303047, -277368, 6846472, -3398746, -7829548, -3111497, -4684041, -11503494, -10540608, -7218827, -14754235, -11250256, -12982310, -6721664, -11071862, -2227214, -6740032, -4352502, -7293644, 3794733, -632975, 379257, -6744463, 5806729, 14045305, -1191916, 5883394, 6906919, 5159485, 1190806, 7436646, 3049741, 1941269, 9037482, 6449592, -842223, -7762487, 1763007, -5633573, -4912329, 2341473, 3884128, 1920696, 4260396, 2377112, 7082801, 5777763, 1361595, -1074011, -5449997, -7494683, 4404458, -3646556, -5222842, -714660, -6282670, -2238258, -6851546, -1813642, 889868, 750598, -8191724, -5746386, -2360042, 5821440, -9277894, -1397772, 4275052, 2324256, 6949029, 12222763, -1462736, -733486, -8938113, -9111949, -1060853, -1277263, -8221007, -4206745, 6722027, 9073249, 1773523, 8296013, -1260527, -4674905, 3789894, 2877790, 3734413, 9726831, 5343398, -482878, 7593110, 4595836, 797414, 6341380, 1604224, 524012, -1906322, 2448170, -5660104, -8181856, -6112055, 1294027, 11614107, 4201231, 7329319, 4679927, 17121567, 10824181, 10785829, 12487311, 2976675, 3178183, 7096501, 9698117, 552129, 1259175, -4219100, -6025808, -380294, 4519604, -5011939, -1612211, -526318, -4914110, 2847473, -20317, 4304310, -248426, 2999210, 768494, -10700439, -5394179, -2604541, -3999293, -10171170, -11292386, -205587, -8498781, -345058, -3232282, -9955966, -5728362, -5511867, -2533773, -11512325, -9975459, 1224235, 6424577, -744902, -6155822, -753286, -6713376, 288143, -1458001, -5660572, 1320940, 1507077, 8689371, -10335717, -2309019, -1031171, 1431219, 3704562, -2023452, -3160528, 4356674, 1775775, 1398849, 13625832, 5643800, -284579, 2229435, 734655, 4602649, 6521345, -770715, 10653089, 7564397, -60353, -3026705, -4663993, 2052807, -4930, 80178, 6604383, -1605599, -3106901, -2373513, 1685083, 3581203, -5029020, -10170234, -7728795, -1230827, -2800132, -2546366, -3336208, -8909090, 1384350, -6676064, -1181982, 4946116, 2332153, -5762859, 617338, 863180, -2892532, -9438784, -6820323, -2821793, -8224215, -3671611, 569879, -1760789, 5398633, 7070759, 975957, 6094575, 4437087, 5927585, 4386302, 1688494, 3689438, 7151762, -1469031, 3578011, -3963670, 1591406, 1893055, 1950421, 2659622, 3219442, 8869343, 3962377, 10773003, 12684925, 6781776, 8304040, 3043756, 3922682, 5490764, 4384118, 234782, -7219700, -391480, 7057846]]);

      final expectedRounded = mockPolyVec([[1525, -2137, 144, -1376, -331, 971, -2396, 2280, -3447, 1095, 1160, -2040, 934, 2004, 1463, 1783, -1926, 2496, -1675, -443, -2640, 2010, 3968, 3722, 1010, 1984, -2550, -2764, 1837, -2191, 2425, -2447, -1399, -3975, -4076, 1538, 1063, -1475, 2966, -1690, 2317, -235, 1706, 2488, 1553, 3529, 1727, 2523, 2871, -1439, 1120, 3768, 556, 1432, -3279, 2403, 1723, -859, -2317, 997, -2838, -1116, 3654, -1956, 594, -1842, -3034, -3210, -3060, -3066, 276, -3794, -746, -3072, 3642, 3060, -1172, -2272, 2213, 299, 3632, 3794, -641, -2445, -4085, 689, 3761, 3943, -3605, -3487, 4051, -2483, 1041, 2727, -3002, 2398, -1139, 2927, 2214, 450, -874, 124, 2790, 772, -1408, -276, 2414, -1238, 568, 1952, -823, -309, -2149, -1265, -2521, 2295, 287, 2549, -3035, 2703, 2979, -313, 2229, -1211, 3265, -2393, -220, 3504, -3462, -2380, 1565, 1613, -2030, 1090, -3343, -3933, 3510, -2666, 938, -1554, -1687, -3843, 515, -1597, 3294, -3810, -787, -3677, -994, 3558, -2686, -2154, 1349, -2445, -2565, 2397, 3627, 2049, 570, -3630, 378, 4064, 1423, 175, 100, 2028, -251, -2341, 2587, 1125, 1021, -2381, 1778, -28, 1584, -1470, -1889, -1983, 2536, -488, 2141, 1211, -2625, -1255, 513, -667, 3489, 3181, -3009, -3857, -2745, -3385, 3262, -1742, 1631, 33, -2133, 2167, -2469, 1299, 868, -3962, -3739, -2027, 1532, 1346, -2064, 3806, -98, 416, -2334, -1852, -2567, -3883, 2938, 3020, -756, -1600, 3613, -3745, 553, -1595, -3561, 491, 105, 1063, 1109, -273, -2977, -3423, 3582, 942, 3038, 146, -2663, -1893, 1258, 2158, 703, 725, -2778, -14, -2593, -2551, 523, 3709, -1200, -2648, -3668, -1286, 2124, 1398, -2786, -2548, 1736, -3658]]);
      final expectedRemaining = mockPolyVec([[-505, -408, -373, 631, -199, -1122, -191, -685, 361, 281, -34, 836, -415, -956, -380, -572, -1404, -1287, -881, -1801, -1373, -1585, -821, -1352, -272, -823, -531, -890, 463, -77, 46, -823, 709, 1715, -145, 718, 843, 630, 145, 908, 372, 237, 1103, 787, -103, -948, 215, -688, -600, 286, 474, 234, 520, 290, 865, 705, 166, -131, -665, -915, 538, -445, -638, -87, -767, -273, -836, -221, 109, 92, -1000, -701, -288, 711, -1133, -171, 522, 284, 848, 1492, -179, -90, -1091, -1112, -129, -156, -1004, -514, 821, 1108, 216, 1013, -154, -571, 463, 351, 456, 1187, 652, -59, 927, 561, 97, 774, 196, 64, -233, 299, -691, -999, -746, 158, 1418, 513, 895, 571, 2090, 1321, 1317, 1524, 363, 388, 866, 1184, 67, 154, -515, -736, -46, 552, -612, -197, -64, -600, 348, -2, 525, -30, 366, 94, -1306, -658, -318, -488, -1242, -1378, -25, -1037, -42, -395, -1215, -699, -673, -309, -1405, -1218, 149, 784, -91, -751, -92, -820, 35, -178, -691, 161, 184, 1061, -1262, -282, -126, 175, 452, -247, -386, 532, 217, 171, 1663, 689, -35, 272, 90, 562, 796, -94, 1300, 923, -7, -369, -569, 251, -1, 10, 806, -196, -379, -290, 206, 437, -614, -1241, -943, -150, -342, -311, -407, -1088, 169, -815, -144, 604, 285, -703, 75, 105, -353, -1152, -833, -344, -1004, -448, 70, -215, 659, 863, 119, 744, 542, 724, 535, 206, 450, 873, -179, 437, -484, 194, 231, 238, 325, 393, 1083, 484, 1315, 1548, 828, 1014, 372, 479, 670, 535, 29, -881, -48, 862]]);

      final actual = pv.powerRound();

      expectPolyVecsAreEqual(expectedRounded, actual[0]);
      expectPolyVecsAreEqual(expectedRemaining, actual[1]);
    });

    test('randomVecGamma1', (){
      Uint8List seed = Uint8List.fromList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]);
      int nonce = 0;
      int gamma1 = 1 << 17;
      final expected = mockPolyVec([[121734, -77002, -28253, 106854, -62871, -121308, -68538, -54224, 11297, -127054, 109357, -7942, 122742, 19562, -62460, -82650, 90819, -66916, 91242, -4883, -49610, 8532, 86728, -130101, 96345, 13713, -70746, 44955, 45506, 121371, 53270, -21154, 24769, 53074, -97775, -11701, 40940, 31276, -22093, 73973, 25911, -65782, -31592, -72604, 86543, 2640, 110713, 8481, 55205, 78068, -99948, -25025, 85854, -25267, 8259, -41439, -94066, 30430, 115847, -114741, -77512, -52113, 72773, -99169, -93991, -127982, -58401, 91027, -28150, 69088, -83610, -118815, -64034, -47586, -5831, 111688, 93566, -36350, -94631, -110114, 102331, -16902, -18236, -57123, -8931, 106700, 65, -55728, -84407, 8547, 37317, -129773, 17743, -127339, 67847, 110528, 107810, 16662, -116692, -127373, 14162, -40438, -54183, 120399, 98377, -47082, -72378, -130709, -4991, -45500, -94132, -121854, -13319, 39492, 12800, -4304, 19054, -104257, -55092, 106088, -54188, -25230, -15176, -74877, 20784, 124645, -105025, 12464, 35297, 16537, 44481, 84164, 32720, 30140, 20381, 75174, 20763, -25165, -16841, -43309, 46156, 102544, -90879, 82035, 24183, -73180, 46577, 44248, 91649, 4040, 60233, 44710, -11510, -121510, 47829, 107478, -47472, 70398, -104651, -21807, 72794, -74640, 20435, -74438, 93990, -41611, 37290, 63299, -73981, -121472, 126172, 55504, -125688, -117371, -78066, -106623, 130977, 50480, 56016, -40235, 69932, -32689, 115078, -113435, 38927, 32318, -15921, -69412, -58593, 87654, 51809, 15221, -67292, -2436, 28511, -117592, 110305, 62558, -41556, 121122, -19914, 65060, -63571, 11354, -61336, -50004, 73301, 53397, -26044, -127622, -10898, -108776, -29388, 121634, -109364, 116625, -11905, -2415, 51594, 39900, 79969, -19305, -46595, -10988, 14352, 58956, -123652, 67470, -70996, 81926, 69194, 67938, 26886, -115826, -5095, -48508, 60738, 37361, -43598, -24477, -34320, 109014, 21705, 47886, 38156, 64336, 5305, 103005, -65271, 58050, 18516, 18521, 82797, -39508, 32332, -128345]]);

      final actual = PolyVec.randomVecGamma1(seed, 1, gamma1, nonce);

      expectPolyVecsAreEqual(expected, actual);
    });

    test('decompose', (){
      final pv = mockPolyVec([[-4135435, -3344473, -3055472, 5167776, -1630539, -9190453, -1567068, -5609240, 2953865, 2303047, -277368, 6846472, -3398746, -7829548, -3111497, -4684041, -11503494, -10540608, -7218827, -14754235, -11250256, -12982310, -6721664, -11071862, -2227214, -6740032, -4352502, -7293644, 3794733, -632975, 379257, -6744463, 5806729, 14045305, -1191916, 5883394, 6906919, 5159485, 1190806, 7436646, 3049741, 1941269, 9037482, 6449592, -842223, -7762487, 1763007, -5633573, -4912329, 2341473, 3884128, 1920696, 4260396, 2377112, 7082801, 5777763, 1361595, -1074011, -5449997, -7494683, 4404458, -3646556, -5222842, -714660, -6282670, -2238258, -6851546, -1813642, 889868, 750598, -8191724, -5746386, -2360042, 5821440, -9277894, -1397772, 4275052, 2324256, 6949029, 12222763, -1462736, -733486, -8938113, -9111949, -1060853, -1277263, -8221007, -4206745, 6722027, 9073249, 1773523, 8296013, -1260527, -4674905, 3789894, 2877790, 3734413, 9726831, 5343398, -482878, 7593110, 4595836, 797414, 6341380, 1604224, 524012, -1906322, 2448170, -5660104, -8181856, -6112055, 1294027, 11614107, 4201231, 7329319, 4679927, 17121567, 10824181, 10785829, 12487311, 2976675, 3178183, 7096501, 9698117, 552129, 1259175, -4219100, -6025808, -380294, 4519604, -5011939, -1612211, -526318, -4914110, 2847473, -20317, 4304310, -248426, 2999210, 768494, -10700439, -5394179, -2604541, -3999293, -10171170, -11292386, -205587, -8498781, -345058, -3232282, -9955966, -5728362, -5511867, -2533773, -11512325, -9975459, 1224235, 6424577, -744902, -6155822, -753286, -6713376, 288143, -1458001, -5660572, 1320940, 1507077, 8689371, -10335717, -2309019, -1031171, 1431219, 3704562, -2023452, -3160528, 4356674, 1775775, 1398849, 13625832, 5643800, -284579, 2229435, 734655, 4602649, 6521345, -770715, 10653089, 7564397, -60353, -3026705, -4663993, 2052807, -4930, 80178, 6604383, -1605599, -3106901, -2373513, 1685083, 3581203, -5029020, -10170234, -7728795, -1230827, -2800132, -2546366, -3336208, -8909090, 1384350, -6676064, -1181982, 4946116, 2332153, -5762859, 617338, 863180, -2892532, -9438784, -6820323, -2821793, -8224215, -3671611, 569879, -1760789, 5398633, 7070759, 975957, 6094575, 4437087, 5927585, 4386302, 1688494, 3689438, 7151762, -1469031, 3578011, -3963670, 1591406, 1893055, 1950421, 2659622, 3219442, 8869343, 3962377, 10773003, 12684925, 6781776, 8304040, 3043756, 3922682, 5490764, 4384118, 234782, -7219700, -391480, 7057846]]);
      final expectedRounded = mockPolyVec([[-8325643, -8582233, -8293232, -69984, -8439627, -16523317, -8376156, -8228120, -188791, 207943, -8134008, 37384, -8636506, -8353324, -8349257, -8350473, -16741254, -16825920, -8266379, -16849339, -17011792, -16648742, -8292992, -16833398, -8512526, -8311360, -8542710, -8341196, 128301, -8489615, -144519, -8315791, 45193, -96648, -8524780, 121858, 97831, -78275, 143254, 103782, -92915, -153835, 133289, 164280, -8175087, -8286263, 191679, -8252453, -8578761, 246369, 217696, -174408, 70188, -241768, -250063, 16227, -209733, -8406875, -8592653, -8542235, 214250, -8360540, -8365498, -8571300, -8377774, -8523570, -8422874, -8622730, -157684, 226822, -8191724, -8365266, -8121578, 59904, -16610758, -8206860, 84844, 229152, 139941, 175914, -8271824, -8590126, -16794753, -16968589, -8393717, -8610127, -8221007, -8396953, -87061, 169056, 202195, -84404, -8593391, -8341337, 123462, 258910, 67981, -224914, 105638, -8339518, 260246, -118148, -250138, 56068, 32896, 236, -8191634, -170710, -8278984, -8181856, -8207159, 246475, 91034, 11023, -3545, -34057, 8217374, -175116, -213468, -83314, -165981, 35527, -236363, -253628, 28353, 211623, -8409308, -8120912, -8236934, -194380, -8154595, -8421299, -8382958, -8580542, 228593, -20317, 114102, -248426, -143446, 244718, -16985751, -8536835, -8366077, -8189501, -16980258, -16530146, -205587, -8498781, -8201698, -8470042, -16765054, -8347242, -8130747, -8295309, -16750085, -16784547, 176683, 139265, -8601542, -8250926, -8609926, -8284704, -235633, -8267089, -8279452, -250388, -64251, -214822, -16621029, -8594331, -8364035, -140109, 38130, -8308764, -8398288, 166466, 204447, -172479, 7655, -117736, -8141219, 134331, 210879, -111335, 236033, -8627355, 177568, 231533, -60353, -8264465, -8330425, -42297, -4930, 80178, -204705, -8414687, -8344661, -8135049, 113755, -85229, -8171676, -16979322, -8252571, -8563691, -8561668, -8307902, -8573968, -16765730, -186978, -8247392, -8514846, 232132, 237049, -8381739, 93562, -184372, -8130292, -16771648, -8391651, -8583329, -8224215, -8385595, 46103, -8569877, 160873, 261671, -71595, -190737, 246879, 166049, 196094, 117166, 23006, -181102, -8278119, -88421, -8153878, 20078, -202049, -144683, 40742, 76786, -34850, -227831, -226294, 114300, -27312, -76377, -98900, 256250, 253004, 193910, 234782, -8267252, -8248120, 248758]]);
      final expectedRemaining = mockPolyVec([[8, 10, 10, 10, 13, 14, 13, 5, 6, 4, 15, 13, 10, 1, 10, 7, 10, 12, 2, 4, 11, 7, 3, 11, 12, 3, 8, 2, 7, 15, 1, 3, 11, 11, 14, 11, 13, 10, 2, 14, 6, 4, 1, 12, 14, 1, 3, 5, 7, 4, 7, 4, 8, 5, 14, 11, 3, 14, 6, 2, 8, 9, 6, 15, 4, 12, 3, 13, 2, 1, 0, 5, 11, 11, 14, 13, 8, 4, 13, 7, 13, 15, 15, 15, 14, 14, 0, 8, 13, 1, 3, 0, 14, 7, 7, 5, 7, 3, 10, 15, 14, 9, 2, 12, 3, 1, 12, 5, 5, 0, 4, 2, 6, 8, 14, 9, 1, 5, 5, 8, 6, 6, 14, 3, 1, 2, 8, 4, 15, 9, 6, 13, 15, 7, 5, 0, 8, 0, 6, 1, 12, 6, 11, 8, 13, 10, 0, 0, 15, 10, 13, 5, 5, 11, 10, 13, 2, 12, 15, 4, 15, 3, 1, 13, 5, 3, 3, 1, 12, 12, 14, 3, 7, 12, 10, 8, 3, 3, 10, 11, 15, 4, 1, 9, 12, 15, 4, 14, 0, 10, 7, 4, 0, 0, 13, 13, 10, 11, 3, 7, 6, 13, 1, 14, 11, 11, 10, 15, 3, 3, 14, 9, 4, 5, 1, 2, 10, 14, 3, 11, 0, 9, 1, 13, 10, 13, 2, 12, 8, 11, 8, 3, 7, 14, 13, 7, 8, 3, 4, 4, 5, 6, 1, 8, 5, 8, 13, 0, 6, 7, 10, 8, 0, 2, 15, 13]]);
      
      int gamma2 = (Dilithium.Q - 1) ~/ 32;
      final actual = pv.decompose(gamma2);

      expectPolyVecsAreEqual(expectedRounded, actual[0]);
      expectPolyVecsAreEqual(expectedRemaining, actual[1]);
    });

    test('chknorm', (){
      final coef = List<int>.generate(Dilithium.N, (index) => index % 100);
      final pv = mockPolyVec([coef]);

      expect(pv.chknorm(200), false);
      expect(pv.chknorm(50), true);
    });

    test('shift', (){
      final coef = List<int>.generate(Dilithium.N, (index) => index);
      final pv = mockPolyVec([coef]);
      final expected = mockPolyVec([[0, 8192, 16384, 24576, 32768, 40960, 49152, 57344, 65536, 73728, 81920, 90112, 98304, 106496, 114688, 122880, 131072, 139264, 147456, 155648, 163840, 172032, 180224, 188416, 196608, 204800, 212992, 221184, 229376, 237568, 245760, 253952, 262144, 270336, 278528, 286720, 294912, 303104, 311296, 319488, 327680, 335872, 344064, 352256, 360448, 368640, 376832, 385024, 393216, 401408, 409600, 417792, 425984, 434176, 442368, 450560, 458752, 466944, 475136, 483328, 491520, 499712, 507904, 516096, 524288, 532480, 540672, 548864, 557056, 565248, 573440, 581632, 589824, 598016, 606208, 614400, 622592, 630784, 638976, 647168, 655360, 663552, 671744, 679936, 688128, 696320, 704512, 712704, 720896, 729088, 737280, 745472, 753664, 761856, 770048, 778240, 786432, 794624, 802816, 811008, 819200, 827392, 835584, 843776, 851968, 860160, 868352, 876544, 884736, 892928, 901120, 909312, 917504, 925696, 933888, 942080, 950272, 958464, 966656, 974848, 983040, 991232, 999424, 1007616, 1015808, 1024000, 1032192, 1040384, 1048576, 1056768, 1064960, 1073152, 1081344, 1089536, 1097728, 1105920, 1114112, 1122304, 1130496, 1138688, 1146880, 1155072, 1163264, 1171456, 1179648, 1187840, 1196032, 1204224, 1212416, 1220608, 1228800, 1236992, 1245184, 1253376, 1261568, 1269760, 1277952, 1286144, 1294336, 1302528, 1310720, 1318912, 1327104, 1335296, 1343488, 1351680, 1359872, 1368064, 1376256, 1384448, 1392640, 1400832, 1409024, 1417216, 1425408, 1433600, 1441792, 1449984, 1458176, 1466368, 1474560, 1482752, 1490944, 1499136, 1507328, 1515520, 1523712, 1531904, 1540096, 1548288, 1556480, 1564672, 1572864, 1581056, 1589248, 1597440, 1605632, 1613824, 1622016, 1630208, 1638400, 1646592, 1654784, 1662976, 1671168, 1679360, 1687552, 1695744, 1703936, 1712128, 1720320, 1728512, 1736704, 1744896, 1753088, 1761280, 1769472, 1777664, 1785856, 1794048, 1802240, 1810432, 1818624, 1826816, 1835008, 1843200, 1851392, 1859584, 1867776, 1875968, 1884160, 1892352, 1900544, 1908736, 1916928, 1925120, 1933312, 1941504, 1949696, 1957888, 1966080, 1974272, 1982464, 1990656, 1998848, 2007040, 2015232, 2023424, 2031616, 2039808, 2048000, 2056192, 2064384, 2072576, 2080768, 2088960]]);

      final actual = pv.shift();

      expectPolyVecsAreEqual(expected, actual);
    });
  });
}

PolyVec mockPolyVec(List<List<int>> coef){
  PolyVec pv = PolyVec(coef.length);
  for(int i = 0; i < coef.length; i++){
    pv.poly[i] = Poly(coef[i].length)..coef = coef[i];
  }
  return pv;
}

void expectPolyVecsAreEqual(PolyVec expected, PolyVec actual){
  expect(actual.length, expected.length);
  for(int i = 0; i < expected.length; i++){
    expect(actual.poly[i].coef, expected.poly[i].coef);
  }
}